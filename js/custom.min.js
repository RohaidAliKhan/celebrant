gsap.registerPlugin(ScrollTrigger);
// function initialization
$(window).on('load', function () {
    preloader()
});
// Using Locomotive Scroll from Locomotive https://github.com/locomotivemtl/locomotive-scroll
const scroll = new LocomotiveScroll({
    el: document.querySelector("[data-scroll-container]"),
    smooth: true,
    tablet: {
        smooth: true,
        breakpoint: 0
    },
    mobile: {
        smooth: false
    }
});
$(function () {
    // each time Locomotive Scroll updates, tell ScrollTrigger to update too (sync positioning)
    scroll.on("scroll", ScrollTrigger.update);

    // tell ScrollTrigger to use these proxy methods for the "[data-scroll-container]" element since Locomotive Scroll is hijacking things
    ScrollTrigger.scrollerProxy("[data-scroll-container]", {
        scrollTop(value) {
            return arguments.length
                ? scroll.scrollTo(value, 0, 0)
                : scroll.scroll.instance.scroll.y;
        }, // we don't have to define a scrollLeft because we're only scrolling vertically.
        getBoundingClientRect() {
            return {
                top: 0,
                left: 0,
                width: window.innerWidth,
                height: window.innerHeight,
            };
        },
        // LocomotiveScroll handles things completely differently on mobile devices - it doesn't even transform the container at all! So to get the correct behavior and avoid jitters, we should pin things with position: fixed on mobile. We sense it by checking to see if there's a transform applied to the container (the LocomotiveScroll-controlled element).
        pinType: document.querySelector("[data-scroll-container]").style.transform
            ? "transform"
            : "fixed",
    });

    allFunctionInit();
    new ResizeObserver(() => scroll.update()).observe(document.querySelector("[data-scroll-container]"))

    // each time the window updates, we should refresh ScrollTrigger and then update LocomotiveScroll.
    ScrollTrigger.addEventListener("refresh", () => scroll.update());

    // after everything is set up, refresh() ScrollTrigger and update LocomotiveScroll because padding may have been added for pinning, etc.
    ScrollTrigger.refresh();
});

function allFunctionInit() {
    mainSlider();
    imgRevealer();
    ReviewSlider();
    instaSlider();
    bookSlider();
    imgSizing();
    headingReveal();
}

function mainSlider() {
    var interleaveOffset = 0.5;
    var swiperOptions = {
        loop: true,
        speed: 1000,
        parallax: true,
        // autoplay: {
        //     delay: 3500,
        //     disableOnInteraction: false,
        // },
        autoplay: false,
        grabCursor: false,
        pagination: {
            el: ".swiper-pagination",
            clickable: true,
            // type: "fraction",
        },
        navigation: {
            nextEl: ".swiper-next",
            prevEl: ".swiper-prev",
        },
        on: {
            progress: function () {
                var swiper = this;
                for (var i = 0; i < swiper.slides.length; i++) {
                    var slideProgress = swiper.slides[i].progress;
                    var innerOffset = swiper.width * interleaveOffset;
                    var innerTranslate = slideProgress * innerOffset;
                    swiper.slides[i].querySelector(".slide-inner").style.transform = "translate3d(" + innerTranslate + "px, 0, 0)";
                }
            },
            touchStart: function () {
                var swiper = this;
                for (var i = 0; i < swiper.slides.length; i++) {
                    swiper.slides[i].style.transition = "";
                }
            },
            setTransition: function (speed) {
                var swiper = this;
                for (var i = 0; i < swiper.slides.length; i++) {
                    swiper.slides[i].style.transition = speed + "ms";
                    swiper.slides[i].querySelector(".slide-inner").style.transition = speed + "ms";
                }
            },
        },
    };

    const swiper = new Swiper(".homeSlider", swiperOptions);

    // DATA BACKGROUND IMAGE
    var pageSection = $(".bg-image");
    pageSection.each(function (indx) {
        if ($(this).attr("data-background")) {
            $(this).css("background-image", "url(" + $(this).data("background") + ")");
        }
    });
}

function imgRevealer() {
    let revealContainers = document.querySelectorAll(".reveal");
    revealContainers.forEach((container) => {
        let image = container.querySelector("img");
        let tl = gsap.timeline({
            scrollTrigger: {
                scroller: '[data-scroll-container]',
                trigger: container,
                toggleActions: "restart none none reverse"
            }
        });

        tl.set(container, {autoAlpha: 1});
        tl.from(container, .75, {
            xPercent: -100,
            ease: Power2.out
        });
        tl.from(image, .75, {
            xPercent: 100,
            scale: 2,
            delay: -.75,
            ease: Power2.out
        });
    });
}

function ReviewSlider() {
    var reviewBox = new Swiper(".ReviewSlider", {
        slidesPerView: 3,
        loop: true,
        spaceBetween: 25,
        navigation: {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev",
        },
        pagination: {
            el: ".swiper-bullets",
            clickable: true,
            // type: "fraction",
        },
        breakpoints: {
            575: {
                slidesPerView: 1,
                spaceBetween: 20,
            },
            768: {
                slidesPerView: 2,
                spaceBetween: 20,
            },
            1024: {
                slidesPerView: 3,
                spaceBetween: 20,
            },
        },
    });
}

function instaSlider() {
    var reviewBox = new Swiper(".instaSlider", {
        slidesPerView: 4,
        loop: true,
        spaceBetween: 25,
        navigation: {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev",
        },
        pagination: {
            el: ".swiper-bullets",
            clickable: true,
            // type: "fraction",
        },
        breakpoints: {
            575: {
                slidesPerView: 1,
                spaceBetween: 20,
            },
            768: {
                slidesPerView: 2,
                spaceBetween: 20,
            },
            1024: {
                slidesPerView: 3,
                spaceBetween: 20,
            },
        },
    });
}

function bookSlider() {
    var reviewBox = new Swiper(".bookSlider", {
        slidesPerView: 1,
        loop: true,
        spaceBetween: 25,
        navigation: {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev",
        },
        pagination: {
            el: ".swiper-bullets",
            clickable: true,
            // type: "fraction",
        },
        breakpoints: {
            575: {
                slidesPerView: 1,
                spaceBetween: 20,
            },
            768: {
                slidesPerView: 2,
                spaceBetween: 20,
            },
            1024: {
                slidesPerView: 3,
                spaceBetween: 20,
            },
        },
    });
}

function imgSizing() {
    let imgTl = gsap.timeline({defaults: {duration: .75}})

    ScrollTrigger.create({
        scroller: '[data-scroll-container]',
        trigger: '.questionSection',
        toggleActions: "restart none none reverse",
        animation: imgTl,
        start: 'top 85%'
    })

    imgTl
        .from('.questionSection', {
            css: {
                backgroundSize: '0% 50%'
            }
        })
        .from('.questionSection figure', {
            scale: 0,
        }, '<-0.25')
}

function headingReveal() {

    const heading = document.querySelectorAll('.secHeading h2')

    heading.forEach((text) => {
        const headingTl = gsap.timeline({
            scrollTrigger: {
                scroller: '[data-scroll-container]',
                trigger: text,
                toggleActions: "play none none reverse",
            }
        });
        headingTl.from(text, 1, {
            y: 120,
            autoAlpha: 0,
            ease: "power4.out",
        })
    })
}

function preloader() {
    let loaderTl = gsap.timeline()

    loaderTl
        .to(".preloaderCont div", {
            xPercent: -100,
            stagger: 0.25,
        })
        .from('.ban1', {
            xPercent: -100,
        })
        .from('.ban2', {
            xPercent: 100,
        }, '>-0.25')
        .from('.ban3', {
            yPercent: 100,
        }, '>-0.25')
        .from('.ban4', {
            xPercent: 100,
        }, '>-0.25')
        .from('.ban9', {
            scale: 0,
        })
        .from('.navbar-brand',{
            x:-50,
            autoAlpha:0,
        }, '<')
        .from('.navbar-nav .nav-item .nav-link',{
            y:-50,
            autoAlpha:0,
            stagger: 0.05,
        }, '<')
        .from('.navbar-nav .nav-item:last-of-type',{
            scale: 0
        },)
}